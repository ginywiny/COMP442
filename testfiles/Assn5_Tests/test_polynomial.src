// ====== struct declarations ====== //
struct POLYNOMIAL {
	public func evaluate(x: float) -> float;
};

struct LINEAR inherits POLYNOMIAL {
	private let a: float;
//	private let b: float;
//	public  func build(A: float, B: float) -> LINEAR;
//	public  func evaluate(x: float) -> float;
};

struct QUADRATIC inherits POLYNOMIAL {
	private let a: float;
	//private let b: float;
	private let c: float;
//	public  func build(A: float, B: float, C: float) -> QUADRATIC;
	public  func evaluate(x: float) -> float;
};

//// ====== struct implementations ====== //
//impl POLYNOMIAL {   
//  func evaluate(x: float) -> float
//  {
//    let localVar: integer;
//    return (0);
//  }
//}
//
func test() -> void 
{
        let n: integer;
}

func test2(x: float) -> void 
{
        let n: integer;
}
  
impl QUADRATIC { 
  func evaluate(x: float) -> float
  {
    let result: float;
    let result: UNDECLAREDCLASS;
    let test2: integer;
    test2 = result + 1.1;
//    test2(1);
//    let test2: LINEAR;
//    let test: integer;
//    test(1.1, 2.2);
//    //Using Horner's method
//    test = 1.1;
//    result = 1;
//    result = a;
//    result = result * x + b;
//    result = result * x + c;
//    return (result);
  }
//  func build(A: float, B: float, C: float) -> QUADRATIC 
//  {
//    let new_function: QUADRATIC ;
//    new_function.a = 1;
//    new_function.b = B;
//    new_function.c = C;
//    return (new_function);
//  }
}
  
//impl LINEAR {
//  func build(A: float, B: float) -> LINEAR 
//  {
//    let new_function: LINEAR;
//    new_function.a = A;
//    new_function.b = B;
//    return (new_function);
//  }
//  func evaluate(x: float) -> float 
//  {
//    let result: float;
//    result = 0.0;
//    result = a * x + b;
//    return (result);
//  }
//} 

////// ====== main ====== //
//func main() -> void
//{
//  let f1: LINEAR;
//  let f2: QUADRATIC;
//  let counter: integer;
//  counter = 1 + 2 * 3;
////  test();	
////  let f3: POLYNOMIAL;
////  f2 = f3.evaluate(1.0);
////  counter = 2 + 1;
////  counter = 2 * 1;
////  f1 = f1.build(2, 3.5);
////  f2 = f2.build(-2.0, 1.0, 0.0);
////  counter = 1;
////	
////  while(counter <= 10)
////  {
////    write(counter);
////    write(f1.evaluate(counter));
////    write(f2.evaluate(counter));
////  };
//}


